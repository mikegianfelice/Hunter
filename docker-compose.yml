version: '3.8'

services:
  hunter-trading-bot:
    build: .
    container_name: hunter-trading-bot
    restart: unless-stopped
    ports:
      - "8765:8765"  # Real-time dashboard
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./system:/app/system
      - ./config.yaml:/app/config.yaml:ro
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
    env_file:
      - system/.env
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8765/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: hunter-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: hunter-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: hunter-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: hunter-network
